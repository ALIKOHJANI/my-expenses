<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema 

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing"">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        /9j/4AAQSkZJRgABAQEAYABgAAD/4QCuRXhpZgAATU0AKgAAAAgAAYdpAAQAAAABAAAAGgAAAAAAAZKG
        AAcAAAB6AAAALAAAAABDAFIARQBBAFQATwBSADoAIABnAGQALQBqAHAAZQBnACAAdgAxAC4AMAAgACgA
        dQBzAGkAbgBnACAASQBKAEcAIABKAFAARQBHACAAdgA5ADAAKQAsACAAZABlAGYAYQB1AGwAdAAgAHEA
        dQBhAGwAaQB0AHkACgAAAP/bAEMACAYGBwYFCAcHBwkJCAoMFA0MCwsMGRITDxQdGh8eHRocHCAkLicg
        IiwjHBwoNyksMDE0NDQfJzk9ODI8LjM0Mv/bAEMBCQkJDAsMGA0NGDIhHCEyMjIyMjIyMjIyMjIyMjIy
        MjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMv/AABEIAWMAvQMBIgACEQEDEQH/xAAfAAAB
        BQEBAQEBAQAAAAAAAAAAAQIDBAUGBwgJCgv/xAC1EAACAQMDAgQDBQUEBAAAAX0BAgMABBEFEiExQQYT
        UWEHInEUMoGRoQgjQrHBFVLR8CQzYnKCCQoWFxgZGiUmJygpKjQ1Njc4OTpDREVGR0hJSlNUVVZXWFla
        Y2RlZmdoaWpzdHV2d3h5eoOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK
        0tPU1dbX2Nna4eLj5OXm5+jp6vHy8/T19vf4+fr/xAAfAQADAQEBAQEBAQEBAAAAAAAAAQIDBAUGBwgJ
        Cgv/xAC1EQACAQIEBAMEBwUEBAABAncAAQIDEQQFITEGEkFRB2FxEyIygQgUQpGhscEJIzNS8BVictEK
        FiQ04SXxFxgZGiYnKCkqNTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqCg4SFhoeI
        iYqSk5SVlpeYmZqio6Slpqeoqaqys7S1tre4ubrCw8TFxsfIycrS09TV1tfY2dri4+Tl5ufo6ery8/T1
        9vf4+fr/2gAMAwEAAhEDEQA/AOM20u2pAtO2169j43mIttG2pglG2nYXMRbaXbUu2l20WFzEOyl2VLtp
        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
        pM0UUAf/2Q==
</value>
  </data>
</root>